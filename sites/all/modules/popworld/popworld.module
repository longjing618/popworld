<?php	

/**
* Implementation of hook_menu().
*/
function popworld_menu() {
  $items['node/get/ajax/%'] = array(
    'page callback' => 'popworld_ajax_get_ajax', // Render HTML
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    //'delivery callback' => 'popworld_ajax_callback',  // Magic goes here
  );
  return $items;
}

function popworld_ajax_get_ajax($nid) 
{
    global $user;
    //drupal_debug($nid);
    //set relationship here
    $node = node_load($nid);
    user_relationships_request_relationship($node->uid,$user->uid,1,true);
    node_delete($nid);
    print "ok";
}

/**
 * Implements hook_form_alter().
 */
function popworld_form_alter(&$form, $form_state, $form_id) 
{
    if(strstr($form_id, 'webform_client_form_')) 
	{
        if(strstr($form_id, 'webform_client_form_24'))
        {
            $form['ask_help'] = array(
                        '#type' => 'button',
                        '#ajax' => array(
                            'action' => 'click',
                            'callback' => 'create_help_alert',
                            'wrapper' => 'status',
                            'method' => 'replace',
                            'name' => 'search',
                        ),
                    '#value' => t('Ask for help'),
                    );
            $form['markup'] = array(
                '#prefix' => '<div id = "status">',
                '#suffix' => '</div>',
                '#markup' => '',
                '#weight' => 2000, //set weight to show markup at the bottom of the form
           );
        }
        else
        {
    		$form['generate_popworld'] = array(
                    	'#type' => 'button',
                    	/*'#ajax' => array(
                        	'action' => 'click',
                        	'callback' => 'generatepopworld',
                        	'wrapper' => 'form-ajax-node-content',
                        	'method' => 'replace',
                        	'name' => 'search',
                    	),*/
                    '#value' => t('Start'),
                    //'#attributes' => array('onclick' => 'generatepopworld(); return false;'),
                    //'#validate' => array(),
                    //'#executes_submit_callback' => FALSE,
                	);
            $form['reset'] = array(
                  '#type' => 'button',
                  '#value' => t('Reset'),
                  '#weight' => 100,
                  '#validate' => array(),
                  '#attributes' => array('onclick' => 'this.form.reset(); return false;'),
            );
           $form['markup'] = array(
                '#prefix' => '<div id = "form-ajax-node-content">',
                '#suffix' => '</div>',
                '#markup' => '',
                '#weight' => 2000, //set weight to show markup at the bottom of the form
           );
       }
	   unset($form['actions']['submit']);
	}
}

function create_help_alert($form, &$form_state)
{
    global $user;
    $node = new stdClass();
    $node->title = "hello";
    $node->type = "user_alert";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->body[$node->language][0]['value'] = "This alert is created from code <input class='accept-help form-submit ajax-processed' type='submit' value='Accept help'> ";
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    // Term reference (taxonomy) field
    //$node->field_product_tid[$node->language][]['tid'] = $form_state['values']['a taxonomy term id'];
    // Entity reference field
    //$node->field_customer_nid[$node->language][] = array(
      //  'target_id' => $form_state['values']['entity id'],
        //'target_type' => 'node',
    //);
    // 'node' is default,
    // Other possible values are "user" and  "taxonomy_term" 
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    //drupal_set_message( "Node with nid " . $node->nid . " saved!\n");
    $node = node_load($node->nid);
    $node->body[$node->language][0]['value']  .= "<p class='node-id' hidden>".$node->nid."</p>".$node->nid;

    node_save($node);


    $form['markup'] = array(
        '#prefix' => '<div id = "status">',
        '#suffix' => '</div>',
        '#markup' => "test",
        '#weight' => 2000,
    );
    return $form['markup'];
}

function generatepopworld($form, &$form_state) 
{
    $module_name = $form["#form_id"];
    $output = "";
    switch($module_name)
    {
        case "webform_client_form_2":
            $output = getBasics($form_state);
            break;
        case "webform_client_form_3":
            $output = getMigration($form_state);
            break;
        case "webform_client_form_4":
            $output = getDrift($form_state);
            break;        
        case "webform_client_form_5":
            $output = getNRMating($form_state);
            break;        
        case "webform_client_form_6":
            $output = getMutation($form_state);
            break;        
        case "webform_client_form_7":
            $output = getSelection($form_state);
            break;
        case "webform_client_form_8":
            $output = getMpulsS($form_state);
            break;
        case "webform_client_form_24":
            $output = gethelp($form_state);
            break;    
    }
    $form['markup'] = array(
            '#prefix' => '<div id = "form-ajax-node-content">',
            '#suffix' => '</div>',
            '#markup' => $output,
            '#weight' => 2000,
       );
    return $form['markup'];
}

function getBasics($form_state)
{
    $values = $form_state["values"]["submitted"];
    $output = "";
    drupal_debug($form_state,NULL);
    $population = $values["population"];
    $frequency = $values["frequency_of__a1_allele_red"];
    $dominance = $values["dominance"];
    $steps = $values["step_n_generations_forward"];

    if(empty($population) || empty($frequency) || empty($dominance))
        $ret = array();
    else
    {
        $basics = new basics($population,$frequency,$dominance);
        $ret = $basics->output();
        //drupal_debug($output,NULL);
    }
    foreach($ret as $key => $value)
    {
         $output .= $key . " " . $value . " ";
         $output .= "<br/>";
    }   

    return $output;
}

function getMigration($form_state)
{
    $output = 'new test';
    return $output;
}

function getDrift($form_state)
{
    $output = 'new test';
    return $output;
}

function getNRMating($form_state)
{
    $output = 'new test';
    return $output;
}

function getMutation($form_state)
{
    $output = 'new test';
    return $output;
}

function getSelection($form_state)
{
    $output = 'new test';
    return $output;
}

function getMpulsS($form_state)
{
    $output = 'new test';
    return $output;
}

?>
