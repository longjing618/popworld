<?php	

/**
* Implementation of hook_menu().
*/
function popworld_menu() {
  $items['node/get/ajax/%'] = array(
    'page callback' => 'popworld_ajax_get_ajax', // Render HTML
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    //'delivery callback' => 'popworld_ajax_callback',  // Magic goes here
  );


  $items['basic'] = array(
    'title' => t('Basic module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array('basic_template'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['drift'] = array(
    'title' => t('Drift module'),
    'description' => t('This is the drift module'),
    'page callback' => 'popworld_template',
    'page arguments' => array('drift_template'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['migration'] = array(
    'title' => t('Migration module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array("migration_template"),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ms'] = array(
    'title' => t('MS module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array("ms_template"),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['mutation'] = array(
    'title' => t('Mutation module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array("mutation_template"),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['nrmating'] = array(
    'title' => t('NR-mating module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array("nrmating_template"),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['selection'] = array(
    'title' => t('Selection module'),
    //'description' => t('Description'),
    'page callback' => 'popworld_template',
    'page arguments' => array("selection_template"),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function popworld_template($args)
{
  return theme($args);
}

/*
 * Implement hook_theme().
 */
function popworld_theme(){
    return array(
        'basic_template' => array(
            // file name will be drift-page.tpl.php
            'template' => 'basic-page',
        ),
        'drift_template' => array(
            // file name will be drift-page.tpl.php
            'template' => 'drift-page',
        ),
        'migration_template' => array(
            'template' => 'migration-page',
        ),
        'nrmating_template' => array(
            'template' => 'nrmating-page',
        ),
        'mutation_template' => array(
            'template' => 'mutation-page',
        ),  
        'selection_template' => array(
            'template' => 'selection-page',
        ),
        'ms_template' => array(
            'template' => 'ms-page',
        ),
        'basic' =>  array(
          'template' => 'basic',
          'render element' => 'page'
        ),
        'drift' =>  array(
          'template' => 'drift',
          'render element' => 'page'
        ),
        'migration' =>  array(
          'template' => 'migration',
          'render element' => 'page'
        ),
        'nrmating' =>  array(
          'template' => 'nrmating',
          'render element' => 'page'
        ),
        'mutation' =>  array(
          'template' => 'mutation',
          'render element' => 'page'
        ),
        'selection' =>  array(
          'template' => 'selection',
          'render element' => 'page'
        ),
        'ms' =>  array(
          'template' => 'ms',
          'render element' => 'page'
        ),     
    );
}

function popworld_preprocess_page(&$variables, $hook) 
{
  //print_r($variables["theme_hook_suggestions"]);
  if($variables["theme_hook_suggestions"][0] == "page__basic")
  {
    $variables['theme_hook_suggestions'][] = 'basic';
  }
  else if ($variables["theme_hook_suggestions"][0] == "page__drift") 
  {
    $variables['theme_hook_suggestions'][] = 'drift';
  }
  else if($variables["theme_hook_suggestions"][0] == "page__migration")
  {
    $variables['theme_hook_suggestions'][] = 'migration';
  }
  else if($variables["theme_hook_suggestions"][0] == "page__nrmating")
  {
    $variables['theme_hook_suggestions'][] = 'nrmating';
  }
  else if($variables["theme_hook_suggestions"][0] == "page__mutation")
  {
    $variables['theme_hook_suggestions'][] = 'mutation';
  }
  else if($variables["theme_hook_suggestions"][0] == "page__selection")
  {
    $variables['theme_hook_suggestions'][] = 'selection';
  }
  else if($variables["theme_hook_suggestions"][0] == "page__ms")
  {
    $variables['theme_hook_suggestions'][] = 'ms';
  }

}

function my_test() {
  // Creates a new object wrapping the given file (path)
  $swf = new SWFObject('/popworld/sites/all/modules/popworld/popworld.swf');

  // With that object, first we add a param to allow full screen.
  $swf->param('allowFullScreen', 'true')
    // Add another param to set the type to movie.
    //->param('type','movie')

    // Set some flash variables, beginning with the aspect ratio...
    ->flashVar('maintainAspectRatio', 'true')

    // Set the height and width of the player.
    ->height(700)
    ->width(700)

    // Set a message for non-Flash capable clients.
    ->noFlash('Install flash.')

   // Declare the minimal Flash version required for this object.
    ->minimumVersion('9.0.28');

  // Theme the object and return that to the client.
  return theme('swfembed_embed', array('swf' => $swf));
}

function popworld_ajax_get_ajax($nid) 
{
  drupal_debug("here");
  if(is_numeric($nid) && strpos($nid,'.') == false)
  {
    //drupal_debug("inside if");
    global $user;
    //drupal_debug($nid);
    //set relationship here
    $node = node_load($nid);
    //drupal_debug("---");
    //drupal_debug($node->uid);
    user_relationships_request_relationship($node->uid,$user->uid,1,true);

    node_delete($nid);
    print "ok";
  }
}

/**
 * Implementation of hook_rules_event_info()
 */
function popworld_rules_event_info() 
{
  return array(
    'getbadge_event' => array(
      'label' => t('Get a badge'),
      'module' => 'popworld',
      'group' => 'Popworld' ,
      'variables' => array(
        'article' => array('type' => 'node', 'label' => t('The quiz node.')),
        'score' => array('type' => 'text', 'label' => t('The score.')),
      ),
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 */
function popworld_rules_action_info() 
{
  $actions = array
  (
    'assignbadge' => array(
      'label' => t('Assign a badge'),
      'group' => t('Popworld'),
      'parameter' => array
      (
        // Each parameter is keyed with an internally used machine name.
        'account' => array
        (
          'type' => 'user',
          'label' => t('User to be assigned a badge'),
          // If we were to make changes to the parameter object, whe should set
          // the 'save' property to TRUE. This makes Rules handle the saving in
          // a more optimized way than if each action saved the objects.
          'save' => TRUE,
        ),
        'article' => array('type' => 'node', 'label' => t('The quiz node.')),
      ),
    ),
  );
  // Don't forget to return the array of action information!
  return $actions;
}

function assignbadge($account,$article)
{
    $user_id = $account->uid;
    
    switch($article->nid)
    {
        case 12:
            $role_id = 7;
            break;
        case 14:
            $role_id = 8;
            break;
        case 15:
            $role_id = 9;
            break;
        case 16:
            $role_id = 10;
            break;
        case 17:
            $role_id = 11;
            break;
        case 18:
            $role_id = 12;
            break;
        case 19:
            $role_id = 13;
            break;                                                            
    }
    if (user_role_load($role_id))
        user_multiple_role_edit(array($user_id), 'add_role', $role_id);
}

/**
 * Implements hook_rules_condition_info().
 */
function popworld_rules_condition_info() 
{
    $conditions = array();
    $conditions['ispassing'] = array
    (
      'label' => t('The user pass a quiz'),
      'group' => t('Popworld'),
      // Parameters are described identically to how they work for actions.
      'parameter' => array
      (
        'quiz' => array('type' => 'node', 'label' => t('The quiz node.')),
        'score' => array('type' => 'number', 'label' => t('The score.')),
      ),
    );

  return $conditions;
}

function ispassing($quiz,$score)
{
    if($score == 1)
        return true;
    return false;
}

/**
 * Implements hook_form_alter().
 */
function popworld_form_alter(&$form, $form_state, $form_id) 
{
    if(strstr($form_id, 'webform_client_form_')) 
	{
        //Add ask help button
        if(strstr($form_id, 'webform_client_form_24'))
        {
            $form['ask_help'] = array(
                        '#type' => 'button',
                        '#ajax' => array(
                            'action' => 'click',
                            'callback' => 'create_help_alert',
                            'wrapper' => 'status',
                            'method' => 'replace',
                            'name' => 'search',
                        ),
                    '#value' => t('Ask for help'),
                    );
            $form['markup'] = array(
                '#prefix' => '<div id = "status">',
                '#suffix' => '</div>',
                '#markup' => '',
                '#weight' => 2000, //set weight to show markup at the bottom of the form
           );
        }
        else
        {
    		$form['generate_popworld'] = array(
                    	'#type' => 'button',
                    	/*'#ajax' => array(
                        	'action' => 'click',
                        	'callback' => 'generatepopworld',
                        	'wrapper' => 'form-ajax-node-content',
                        	'method' => 'replace',
                        	'name' => 'search',
                    	),*/
                    '#value' => t('Start'),
                    '#attributes' => array('onclick' => 'return false;'),
                    //'#validate' => array(),
                    //'#executes_submit_callback' => FALSE,
                	);
            $form['reset'] = array(
                  '#type' => 'button',
                  '#value' => t('Reset'),
                  '#weight' => 100,
                  '#validate' => array(),
                  '#attributes' => array('onclick' => 'this.form.reset(); return false;'),
            );
           $form['markup'] = array(
                '#prefix' => '<div id = "webform_id" hidden>',
                '#suffix' => '</div>',
                '#markup' => $form_id,
                '#weight' => 2000, //set weight to show markup at the bottom of the form
                //'#type' => 'hidden',
           );
            $form['result'] = array(
                //'#prefix' => '<canvas id="result" width="800" height="500">',
                //'#suffix' => '</canvas>',
                '#prefix' => '<div id = "chartdiv" style="width:100%;height:500px;">',
                '#suffix' => '</div>',

                '#weight' => 2000, //set weight to show markup at the bottom of the form
           );
       }
	   unset($form['actions']['submit']);
	}
}

function create_help_alert($form, &$form_state)
{
    global $user;

//valid user points
    $user_point = userpoints_get_current_points($uid,NULL); 
    if($user_point <= 0)
    {
        //javascript callback after ajax call
        $commands = array();
        //$commands[] = ajax_command_invoke('#edit-ask-help', 'val', array('new Title'));
        $commands[] = ajax_command_append('body', '<script> jQuery.msg({ content : "You don\'t have enough Darwin dollars" });</script>');
        return array('#type' => 'ajax', '#commands' => $commands);
    }
    else if($user_point >= 30)
    {
        //javascript callback after ajax call
        $commands = array();
        //$commands[] = ajax_command_invoke('#edit-ask-help', 'val', array('new Title'));
        $commands[] = ajax_command_append('body', '<script> jQuery.msg({ content : "You cannot get more Darwin dollars" });</script>');
        return array('#type' => 'ajax', '#commands' => $commands);      
    }
//
    
    $node = new stdClass();
    $node->title = "Help info:";
    $node->type = "question_request";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->body[$node->language][0]['format'] = 'full_html';
    $node->body[$node->language][0]['value'] = "User ".$user->name." has a question now. <input class='accept-help form-submit ajax-processed' type='submit' value='Accept help'></input>[replace_here] ";
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    // Term reference (taxonomy) field
    //$node->field_product_tid[$node->language][]['tid'] = $form_state['values']['a taxonomy term id'];
    // Entity reference field
    //$node->field_customer_nid[$node->language][] = array(
      //  'target_id' => $form_state['values']['entity id'],
        //'target_type' => 'node',
    //);
    // 'node' is default,
    // Other possible values are "user" and  "taxonomy_term" 
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    //drupal_set_message( "Node with nid " . $node->nid . " saved!\n");
    $node = node_load($node->nid);
    drupal_debug($node->body[$node->language][0]['value']);
    $node->body[$node->language][0]['value'] = str_replace("[replace_here]","<input class='node-id' hidden value=".$node->nid."></input>".$node->nid,$node->body[$node->language][0]['value']);
drupal_debug($node->body[$node->language][0]['value']);
    node_save($node);

/*
    $form['markup'] = array(
        '#prefix' => '<div id = "status">',
        '#suffix' => '</div>',
        '#markup' => "test",
        '#weight' => 2000,
    );
*/
/*
    //set a variable to show that the use need help for the current question
    //which will be used in the quiz module elseif ($_POST['op'] == t('Next question')) 
    $existing = user_load($user->uid);
    $edit = (array) $existing;
    $edit['data']['isasking'] = 1;
    user_save($user, $edit);
*/
    //return $form['markup'];
}

?>
